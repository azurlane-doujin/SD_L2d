{"version":3,"sources":["webpack:///./src/js/sd.js","webpack:///src/components/MySpine.vue","webpack:///./src/components/MySpine.vue?66ee","webpack:///./src/components/MySpine.vue","webpack:///src/components/MySpineController.vue","webpack:///./src/components/MySpineController.vue?7e30","webpack:///./src/components/MySpineController.vue","webpack:///src/App.vue","webpack:///./src/App.vue?5906","webpack:///./src/App.vue","webpack:///./src/router/index.js","webpack:///./src/main.js","webpack:///./src/js/SkeletonBinary.js"],"names":["SD","basePath","this","loader","PIXI","Loader","prototype","spineData","load","name","v","_this","changeCanvas","skelpath","atlaspath","texpath","add","type","xhrType","resources","skelBin","SkeletonBinary","data","Uint8Array","initJson","rawSkeletonData","json","rawAtlasData","spineAtlas","core","TextureAtlas","line","callback","from","spineAtlasLoader","AtlasAttachmentLoader","skeletonData","SkeletonJson","readSkeletonData","MySpine","props","animations","selectedAnimation","width","document","body","clientWidth","height","clientHeight","watch","newName","oldName","changeAnimation","skelName","mySpineHolder","created","window","lib","transparent","onresize","renderer","resize","centerSD","backgroundColor","mounted","console","log","$refs","spine","view","id","appendChild","methods","_this2","stage","removeChildren","Spine","state","setAnimation","addChild","num","position","set","components_MySpine","render","_vm","_h","$createElement","_c","_self","ref","attrs","_v","model","value","$$v","expression","_l","i","key","label","staticRenderFns","src_components_MySpine","__webpack_require__","normalizeComponent","ssrContext","MySpineController","components","selectedModel","modelNames","bgColor","_axios_0_18_0_axios_default","a","defaults","headers","common","get","then","response","newdata","olddata","d","slice","colorNum","parseInt","mySpine","components_MySpineController","_s","App","MySpineController_normalizeComponent","selectortype_template_index_0_src_App","src_App","App_normalizeComponent","Vue","use","Router","router","routes","dir","warn","error","lib_color_picker_default","lib_select_default","lib_option_default","config","productionTip","el","template","scale","nextNum","chars","readByte","length","readBoolean","readShort","readInt","optimizePositive","b","result","bytes2Float32","bytes","sign","exponent","significand","Number","NaN","POSITIVE_INFINITY","Math","pow","readFloat","readVertices","vertexCount","verticesLength","readFloatArray","vertices","Array","boneCount","push","j","n","array","readShortArray","readIntArray","readHex","hex","toString","readColor","readString","charCount","String","fromCharCode","skeleton","hash","nonessential","fps","images","bones","boneData","parent","parentIndex","rotation","x","y","scaleX","scaleY","shearX","shearY","transform","TransformMode","color","slots","slotData","bone","dark","attachment","blend","BlendMode","ik","ikConstraints","order","target","mix","bendPositive","transformConst","ii","nn","local","relative","rotateMix","translateMix","scaleMix","shearMix","path","pathConst","positionMode","PositionMode","spacingMode","SpacingMode","rotateMode","RotateMode","spacing","skins","skinsName","defaultSkin","readSkin","skinName","skin","events","eventsName","eventName","event","int","float","string","animationName","animation","readAnimation","slotCount","slotIndex","slot","readAttachment","attachmentName","AttachmentType","region","box","mesh","uvs","triangles","hull","edges","linkedmesh","deform","closed","constantSpeed","lengths","point","clipping","end","readCurve","frameIndex","timeline","curve","cx1","cy1","cx2","cy2","duration","slotMap","timeCount","timelineType","frameCount","time","max","light","twoColor","boneIndex","boneMap","angle","rotate","timelineScale","tltime","tlx","tly","translate","shear","ikIndex","transformIndex","paths","pathIndex","pathMap","f","skinIndex","slotAtt","iii","nnn","meshName","start","offset","drawOrderCount","drawOrders","drawOrderMap","offsetCount","offsets","offsetMap","dooffset","drawOrder","eventCount","eventData","e","exports"],"mappings":"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","file":"distStatic/js/app.6cd5ca21fb9ef62eb7da.js","sourcesContent":["import {SkeletonBinary} from './SkeletonBinary.js';\nimport * as PIXI from 'pixi.js';\nimport \"pixi-spine\";\n\nfunction SD(basePath) {\n    this.basePath = basePath;\n    this.loader = new PIXI.loaders.Loader(this.basePath);\n}\nSD.prototype = {\n    spineData: {},\n    load: function(name, v) {\n        if (!this.spineData[name]) {\n            var skelpath = name + '.skel';\n            var atlaspath = name + '.atlas';\n            var texpath = name + '.png';\n            this.loader.add(name + '_atlas', atlaspath, {\n                type: 'atlas',\n            });\n            this.loader.add(name + '_skel', skelpath, {\n                xhrType: 'arraybuffer',\n            });\n            this.loader.add(name + '_tex', texpath);\n\n\n            this.loader.load((loader, resources) => {\n                var skelBin = new SkeletonBinary();\n                skelBin.data = new Uint8Array(resources[name + '_skel'].data);\n\n\n                skelBin.initJson();\n                var rawSkeletonData = skelBin.json;\n\n                var rawAtlasData = resources[name + '_atlas'].data;\n                var spineAtlas = new PIXI.spine.core.TextureAtlas(rawAtlasData, function(line, callback) {\n                    callback(PIXI.BaseTexture.from(name + '_tex'));\n                });\n                var spineAtlasLoader = new PIXI.spine.core.AtlasAttachmentLoader(spineAtlas);\n                var spineJsonParser = new PIXI.spine.core.SkeletonJson(spineAtlasLoader);\n                var skeletonData = spineJsonParser.readSkeletonData(rawSkeletonData);\n                this.spineData[name] = skeletonData;\n                v.changeCanvas(skeletonData);\n            });\n        } else {\n            v.changeCanvas(this.spineData[name]);\n        }\n    },\n};\n\nexport {SD};\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/sd.js","<template>\n    <div ref=\"spine\" id=\"mySpineHolder\">\n        select animation: <el-select name=\"\" id=\"spineSelect\" v-model=\"selectedAnimation\"\n            ><el-option v-for=\"i in animations.length\" :key=\"i\" :value=\"i-1\" :label=\"animations[i-1].name\"></el-option></el-select\n        >\n    </div>\n</template>\n\n<script>\nimport 'pixi-spine';\nimport {SD} from '../js/sd.js';\nimport * as PIXI from 'pixi.js';\nimport {SkeletonBinary} from '../js/SkeletonBinary.js';\n\nexport default {\n    name: 'MySpine',\n    props: ['skelName'],\n    data() {\n        return {\n            basePath:\"https://pic.ggemo.com/al_spines/\",\n            spineData: [],\n            animations: [],\n            selectedAnimation:\"\",\n            width:document.body.clientWidth,\n            height:document.body.clientHeight\n        };\n    },\n    watch:{\n        selectedAnimation:function (newName,oldName) {\n            this.changeAnimation(newName)\n        },\n        skelName:function (newName,oldName) {\n            this.load(newName);mySpineHolder\n        }\n    },\n    created() {\n        window.v = this;\n        this.PIXI = new PIXI.Application(this.width, this.height, {\n            transparent: false,\n        });\n        window.onresize = ()=>{\n            this.width = document.body.clientWidth;\n            this.height = document.body.clientHeight;\n            this.PIXI.renderer.resize(this.width, this.height);\n            this.centerSD()\n        };\n        this.PIXI.renderer.backgroundColor = 65280\n    },\n    mounted() {\n        console.log(this.$refs.spine);\n        this.PIXI.view.id=\"showSD\"\n        document.body.appendChild(this.PIXI.view);\n        this.load(this.skelName);\n    },\n    methods: {\n        load: function(skelName) {\n            let basePath = this.basePath + skelName\n            if (!this.spineData[skelName]) {\n                this.loader = new PIXI.loaders.Loader(basePath);\n                let skelpath = skelName + '.skel';\n                let atlaspath = skelName + '.atlas';\n                let texpath = skelName + '.png';\n                this.loader.add(skelName + '_atlas', atlaspath, {\n                    type: 'atlas',\n                });\n                this.loader.add(skelName + '_skel', skelpath, {\n                    xhrType: 'arraybuffer',\n                });\n                this.loader.add(skelName + '_tex', texpath);\n\n                this.loader.load((loader, resources) => {\n                    let skelBin = new SkeletonBinary();\n                    skelBin.data = new Uint8Array(resources[skelName + '_skel'].data);\n\n                    skelBin.initJson();\n                    let rawSkeletonData = skelBin.json;\n\n                    let rawAtlasData = resources[skelName + '_atlas'].data;\n                    let spineAtlas = new PIXI.spine.core.TextureAtlas(rawAtlasData, function(line, callback) {\n                        callback(PIXI.BaseTexture.from(skelName + '_tex'));\n                    });\n                    let spineAtlasLoader = new PIXI.spine.core.AtlasAttachmentLoader(spineAtlas);\n                    let spineJsonParser = new PIXI.spine.core.SkeletonJson(spineAtlasLoader);\n                    let skeletonData = spineJsonParser.readSkeletonData(rawSkeletonData);\n                    this.spineData[skelName] = skeletonData;\n                    this.selectedAnimation = 0;\n                    this.changeCanvas(skeletonData);\n                    return skeletonData;\n                });\n            } else {\n                this.changeCanvas(this.spineData[skelName]);\n                return this.spineData[skelName];\n            }\n        },\n        changeCanvas: function(skeletonData) {\n            let viewer = this;\n            viewer.PIXI.stage.removeChildren();\n            viewer.spine = new PIXI.spine.Spine(skeletonData);\n            this.animations = viewer.spine.spineData.animations;;\n            viewer.spine.state.setAnimation(0, this.animations[0].name, true);\n            viewer.PIXI.stage.addChild(viewer.spine);\n            this.centerSD()\n        },\n        changeAnimation: function(num) {\n            let name = this.spine.spineData.animations[num].name;\n            this.spine.state.setAnimation(0, name, true);\n        },\n        centerSD(){\n            this.spine.position.set(this.width * 0.5, this.height * 0.65);\n        }\n    },\n};\n</script>\n\n<style>\nselect {\n    width: 150px;\n    height: 30px;\n\n    top: 0;\n    left: 0;\n    z-index: 999;\n    margin-top: 5px;\n    margin-left: 5px;\n}\n#showSD{\n    width: 100%;\n    position: fixed;\n    z-index: 10;\n    left: 0;\n    top: 0;\n    float: left;\n}\n    #mySpineHolder{\n        width:100%;\n        padding: 0;\n    }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/MySpine.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"spine\",attrs:{\"id\":\"mySpineHolder\"}},[_vm._v(\"\\n    select animation: \"),_c('el-select',{attrs:{\"name\":\"\",\"id\":\"spineSelect\"},model:{value:(_vm.selectedAnimation),callback:function ($$v) {_vm.selectedAnimation=$$v},expression:\"selectedAnimation\"}},_vm._l((_vm.animations.length),function(i){return _c('el-option',{key:i,attrs:{\"value\":i-1,\"label\":_vm.animations[i-1].name}})}),1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-0b232a0a\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/MySpine.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0b232a0a\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./MySpine.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./MySpine.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./MySpine.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0b232a0a\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./MySpine.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/MySpine.vue\n// module id = null\n// module chunks = ","<template>\n    <div>\n        <div>\n            <!--<span>background transparent:-->\n                <!--<el-radio v-model=\"bgTransparent\" :label=\"true\" border>-->\n                    <!--transparent-->\n                <!--</el-radio>-->\n                <!--<el-radio v-model=\"bgTransparent\" :label=\"false\" border>-->\n                    <!--choose color-->\n                <!--</el-radio>-->\n            <!--</span>-->\n            <!--<div v-show=\"!bgTransparent\">-->\n            select background color:\n            <el-color-picker v-model=\"bgColor\"></el-color-picker>\n            <!--</div>-->\n        </div>\n\n        select model: <el-select name=\"\" id=\"spineModelSelect\" v-model=\"selectedModel\"\n    >\n        <el-option v-for=\"i in modelNames.length\" :key=\"i\" :value=\"modelNames[i-1]\">{{ modelNames[i-1] }}</el-option>\n    </el-select\n    >\n        <my-spine ref=\"mySpine\" :skelName=\"selectedModel\"></my-spine>\n    </div>\n</template>\n\n<script>\n    import MySpine from \"./MySpine.vue\"\n    import axios from 'axios'\n\n    export default {\n        name: \"MySpineController\",\n        components: {MySpine},\n        data () {\n            return {\n                selectedModel: \"ximu_3\",\n                modelNames: [],\n                bgColor: \"#00ff00\",\n                // bgTransparent: false\n            }\n        },\n        created () {\n            axios.defaults.headers.common['Cache-Control'] = \"no-cache\";\n            axios.get(\"https://pic.ggemo.com/al_spines/sourceList.json\").then((response) => {\n                console.log(response);\n                this.modelNames = response.data;\n\n            })\n        },\n        watch: {\n            \"bgColor\": function (newdata, olddata) {\n                // console.log(newdata)\n\n                // let colors = newdata.slice(5,-1)\n                // let colorsArr = colors.split(\",\")\n                // for (let i = 0;i < 3;i++){\n                //     colorsArr[i] = parseInt(colorsArr[i])/255\n                // }\n                // colorsArr[3] = parseFloat(colorsArr[3])\n                //\n                // console.log(colorsArr)\n                // this.$refs.mySpine.PIXI.renderer._backgroundColorRgba = colorsArr;\n\n                let d = newdata.slice(1)\n                // console.log(d)\n                let colorNum = parseInt(d, 16)\n                this.$refs.mySpine.PIXI.renderer.backgroundColor = colorNum\n            },\n            // \"bgTransparent\":function (newData,oldData) {\n            //     // this.$refs.mySpine.PIXI.transparent = newData\n            // }\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/MySpineController.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',[_vm._v(\"\\n        select background color:\\n        \"),_c('el-color-picker',{model:{value:(_vm.bgColor),callback:function ($$v) {_vm.bgColor=$$v},expression:\"bgColor\"}})],1),_vm._v(\"\\n\\n    select model: \"),_c('el-select',{attrs:{\"name\":\"\",\"id\":\"spineModelSelect\"},model:{value:(_vm.selectedModel),callback:function ($$v) {_vm.selectedModel=$$v},expression:\"selectedModel\"}},_vm._l((_vm.modelNames.length),function(i){return _c('el-option',{key:i,attrs:{\"value\":_vm.modelNames[i-1]}},[_vm._v(_vm._s(_vm.modelNames[i-1]))])}),1),_vm._v(\" \"),_c('my-spine',{ref:\"mySpine\",attrs:{\"skelName\":_vm.selectedModel}})],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-0a53c83c\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/components/MySpineController.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-0a53c83c\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./MySpineController.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./MySpineController.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./MySpineController.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0a53c83c\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./MySpineController.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-0a53c83c\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/MySpineController.vue\n// module id = null\n// module chunks = ","<template>\n    <div id=\"app\" ref=\"app\">\n        <MySpineController></MySpineController>\n    </div>\n</template>\n\n<script>\n    import {viewer} from \"./js/sd-main.js\"\n    // viewer.init(\"./static\");\n    // viewer.loadSd(\"skin1\");\n\n    import MySpineController from \"./components/MySpineController.vue\"\n    export default {\n        name: 'App',\n        components:{MySpineController}\n    }\n</script>\n\n<style>\n    #app {background-color:rgba(255,255,255,0.5) ;\n        font-family: 'Avenir', Helvetica, Arial, sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        text-align: center;\n        color: #2c3e50;\n        z-index: 100;\n        position: absolute;\n    }\n\n    html,body{\n        margin: 0;\n        padding: 0;\n        width:100%;\n        height: 100vh;\n    }\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/App.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{ref:\"app\",attrs:{\"id\":\"app\"}},[_c('MySpineController')],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler?{\"id\":\"data-v-5b81c3c9\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.3@vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../node_modules/_vue-loader@13.7.3@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-5b81c3c9\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n}\nvar normalizeComponent = require(\"!../node_modules/_vue-loader@13.7.3@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./App.vue\"\nimport __vue_script__ from \"!!babel-loader!../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=script&index=0!./App.vue\"\n/* template */\nimport __vue_template__ from \"!!../node_modules/_vue-loader@13.7.3@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-5b81c3c9\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/_vue-loader@13.7.3@vue-loader/lib/selector?type=template&index=0!./App.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = null\n// module chunks = ","import Vue from 'vue'\nimport Router from 'vue-router'\n// import Spine from '@/components/Spine'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    // {\n    //   path: '/',\n    //   name: 'Spine',\n    //   component: Spine\n    // }\n  ]\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/router/index.js","// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\n\nwindow.console.log=()=>{}\nwindow.console.dir=()=>{}\nwindow.console.warn=()=>{}\nwindow.console.error=()=>{}\n\nimport Vue from 'vue'\nimport App from './App'\nimport router from './router'\n\nimport { ColorPicker, Select ,Option} from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nVue.use(ColorPicker)\nVue.use(Select)\nVue.use(Option)\n\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  components: { App },\n  template: '<App/>'\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","function SkeletonBinary() {}\n\nSkeletonBinary.prototype = {\n    data: null,\n    scale: 1,\n    json: {},\n    nextNum: 0,\n    chars: null,\n    readByte: function() {\n        return this.nextNum < this.data.length ? this.data[this.nextNum++] : null;\n    },\n    readBoolean: function() {\n        return this.readByte() != 0;\n    },\n    readShort: function() {\n        return (this.readByte() << 8) | this.readByte();\n    },\n    readInt: function(optimizePositive) {\n        if (typeof optimizePositive === 'undefined') {\n            return (this.readByte() << 24) | (this.readByte() << 16) | (this.readByte() << 8) | this.readByte();\n        }\n        var b = this.readByte();\n        var result = b & 0x7f;\n        if ((b & 0x80) != 0) {\n            b = this.readByte();\n            result |= (b & 0x7f) << 7;\n            if ((b & 0x80) != 0) {\n                b = this.readByte();\n                result |= (b & 0x7f) << 14;\n                if ((b & 0x80) != 0) {\n                    b = this.readByte();\n                    result |= (b & 0x7f) << 21;\n                    if ((b & 0x80) != 0) {\n                        b = this.readByte();\n                        result |= (b & 0x7f) << 28;\n                    }\n                }\n            }\n        }\n        return optimizePositive ? result : (result >> 1) ^ -(result & 1);\n    },\n    bytes2Float32: function(bytes) {\n        var sign = bytes & 0x80000000 ? -1 : 1;\n        var exponent = ((bytes >> 23) & 0xff) - 127;\n        var significand = bytes & ~(-1 << 23);\n        if (exponent == 128) return sign * (significand ? Number.NaN : Number.POSITIVE_INFINITY);\n        if (exponent == -127) {\n            if (significand == 0) return sign * 0.0;\n            exponent = -126;\n            significand /= 1 << 22;\n        } else significand = (significand | (1 << 23)) / (1 << 23);\n        return sign * significand * Math.pow(2, exponent);\n    },\n    readFloat: function() {\n        return this.bytes2Float32((this.readByte() << 24) + (this.readByte() << 16) + (this.readByte() << 8) + (this.readByte() << 0));\n    },\n    readVertices: function(vertexCount) {\n        var verticesLength = vertexCount << 1;\n        if (!this.readBoolean()) {\n            return this.readFloatArray(verticesLength, this.scale);\n        }\n        var vertices = new Array();\n        for (var i = 0; i < vertexCount; i++) {\n            var boneCount = this.readInt(true);\n            vertices.push(boneCount);\n            for (var j = 0; j < boneCount; j++) {\n                vertices.push(this.readInt(true));\n                vertices.push(this.readFloat() * this.scale);\n                vertices.push(this.readFloat() * this.scale);\n                vertices.push(this.readFloat());\n            }\n        }\n        return vertices;\n    },\n    readFloatArray: function(n, scale) {\n        var array = new Array(n);\n        if (scale == 1) {\n            for (var i = 0; i < n; i++) {\n                array[i] = this.readFloat();\n            }\n        } else {\n            for (var i = 0; i < n; i++) {\n                array[i] = this.readFloat() * scale;\n            }\n        }\n        return array;\n    },\n    readShortArray: function() {\n        var n = this.readInt(true);\n        var array = new Array(n);\n        for (var i = 0; i < n; i++) {\n            array[i] = this.readShort();\n        }\n        return array;\n    },\n    readIntArray: function() {\n        var n = this.readInt(true);\n        var array = new Array(n);\n        for (var i = 0; i < n; i++) array[i] = this.readInt(true);\n        return array;\n    },\n    readHex: function() {\n        var hex = this.readByte().toString(16);\n        return hex.length == 2 ? hex : '0' + hex;\n    },\n    readColor: function() {\n        return this.readHex() + this.readHex() + this.readHex() + this.readHex();\n    },\n    readString() {\n        var charCount = this.readInt(this, true);\n        switch (charCount) {\n            case 0:\n                return null;\n            case 1:\n                return '';\n        }\n        charCount--;\n        this.chars = '';\n        var b = 0;\n        for (var i = 0; i < charCount; ) {\n            b = this.readByte();\n            switch (b >> 4) {\n                case 12:\n                case 13:\n                    this.chars += String.fromCharCode(((b & 0x1f) << 6) | (this.readByte() & 0x3f));\n                    i += 2;\n                    break;\n                case 14:\n                    this.chars += String.fromCharCode(((b & 0x0f) << 12) | ((this.readByte() & 0x3f) << 6) | (this.readByte() & 0x3f));\n                    i += 3;\n                    break;\n                default:\n                    this.chars += String.fromCharCode(b);\n                    i++;\n            }\n        }\n        return this.chars;\n    },\n    initJson: function() {\n        this.json.skeleton = {};\n        var skeleton = this.json.skeleton;\n        skeleton.hash = this.readString();\n        if (skeleton.hash.length == 0) skeleton.hash = null;\n        skeleton.spine = this.readString();\n        if (skeleton.spine.length == 0) skeleton.spine = null;\n        skeleton.width = this.readFloat();\n        skeleton.height = this.readFloat();\n        var nonessential = this.readBoolean();\n        if (nonessential) {\n            skeleton.fps = this.readFloat();\n            skeleton.images = this.readString();\n            if (skeleton.images.length == 0) skeleton.images = null;\n        }\n        this.json.bones = new Array(this.readInt(true));\n        var bones = this.json.bones;\n        for (var i = 0; i < bones.length; i++) {\n            var boneData = {};\n            boneData.name = this.readString();\n            boneData.parent = null;\n            if (i != 0) {\n                var parentIndex = this.readInt(true);\n                boneData.parent = bones[parentIndex].name;\n            }\n            boneData.rotation = this.readFloat();\n            boneData.x = this.readFloat() * this.scale;\n            boneData.y = this.readFloat() * this.scale;\n            boneData.scaleX = this.readFloat();\n            boneData.scaleY = this.readFloat();\n            boneData.shearX = this.readFloat();\n            boneData.shearY = this.readFloat();\n            boneData.length = this.readFloat() * this.scale;\n            boneData.transform = TransformMode[this.readInt(true)];\n            if (nonessential) {\n                boneData.color = this.readColor();\n            }\n            bones[i] = boneData;\n        }\n        this.json.slots = new Array(this.readInt(true));\n        var slots = this.json.slots;\n        for (var i = 0; i < slots.length; i++) {\n            var slotData = {};\n            slotData.name = this.readString();\n            var boneData = this.json.bones[this.readInt(true)];\n            slotData.bone = boneData.name;\n            slotData.color = this.readColor();\n            slotData.dark = this.readColor();\n            slotData.attachment = this.readString();\n            slotData.blend = BlendMode[this.readInt(true)];\n            slots[i] = slotData;\n        }\n        var ik = new Array(this.readInt(true));\n        for (var i = 0; i < ik.length; i++) {\n            var ikConstraints = {};\n            ikConstraints.name = this.readString();\n            ikConstraints.order = this.readInt(true);\n            ikConstraints.bones = new Array(this.readInt(true));\n            for (var j = 0; j < ikConstraints.bones.length; j++) {\n                ikConstraints.bones[j] = this.json.bones[this.readInt(true)].name;\n            }\n            ikConstraints.target = this.json.bones[this.readInt(true)].name;\n            ikConstraints.mix = this.readFloat();\n            ikConstraints.bendPositive = this.readByte() != 255;\n            ik[i] = ikConstraints;\n        }\n        this.json.ik = ik;\n        var transform = new Array(this.readInt(true));\n        for (var i = 0; i < transform.length; i++) {\n            var transformConst = {};\n            transformConst.name = this.readString();\n            transformConst.order = this.readInt(true);\n            var bones = new Array(this.readInt(true));\n            for (var ii = 0, nn = bones.length; ii < nn; ii++) {\n                bones[ii] = this.json.bones[this.readInt(true)].name;\n            }\n            transformConst.bones = bones;\n            transformConst.target = this.json.bones[this.readInt(true)].name;\n            transformConst.local = this.readBoolean();\n            transformConst.relative = this.readBoolean();\n            transformConst.rotation = this.readFloat();\n            transformConst.x = this.readFloat() * this.scale;\n            transformConst.y = this.readFloat() * this.scale;\n            transformConst.scaleX = this.readFloat();\n            transformConst.scaleY = this.readFloat();\n            transformConst.shearY = this.readFloat();\n            transformConst.rotateMix = this.readFloat();\n            transformConst.translateMix = this.readFloat();\n            transformConst.scaleMix = this.readFloat();\n            transformConst.shearMix = this.readFloat();\n            transform[i] = transformConst;\n        }\n        this.json.transform = transform;\n        var path = new Array(this.readInt(true));\n        for (var i = 0; i < path.length; i++) {\n            var pathConst = {};\n            pathConst.name = this.readString();\n            pathConst.order = this.readInt(true);\n            pathConst.bones = new Array(this.readInt(true));\n            for (var ii = 0, nn = pathConst.bones.length; ii < nn; ii++) {\n                pathConst.bones[ii] = this.json.bones[this.readInt(true)].name;\n            }\n            pathConst.target = this.json.slots[this.readInt(true)].name;\n            pathConst.positionMode = PositionMode[this.readInt(true)];\n            pathConst.spacingMode = SpacingMode[this.readInt(true)];\n            pathConst.rotateMode = RotateMode[this.readInt(true)];\n            pathConst.rotation = this.readFloat();\n            pathConst.position = this.readFloat();\n            pathConst.spacing = this.readFloat();\n            pathConst.rotateMix = this.readFloat();\n            pathConst.translateMix = this.readFloat();\n            path[i] = pathConst;\n        }\n        this.json.path = path;\n        this.json.skins = {};\n        this.json.skinsName = new Array();\n        var skins = this.json.skins;\n        var defaultSkin = this.readSkin('default', nonessential);\n        if (defaultSkin != null) {\n            skins['default'] = defaultSkin;\n            this.json.skinsName.push('default');\n        }\n        for (var i = 0, n = this.readInt(true); i < n; i++) {\n            var skinName = this.readString();\n            var skin = this.readSkin(skinName, nonessential);\n            skins[skinName] = skin;\n            this.json.skinsName.push('skinName');\n        }\n        this.json.events = [];\n        this.json.eventsName = [];\n        var events = this.json.events;\n        for (var i = 0, n = this.readInt(true); i < n; i++) {\n            var eventName = this.readString();\n            var event = {};\n            event.int = this.readInt(false);\n            event.float = this.readFloat();\n            event.string = this.readString();\n            events[eventName] = event;\n            this.json.eventsName[i] = eventName;\n        }\n        this.json.animations = {};\n        var animations = this.json.animations;\n        for (var i = 0, n = this.readInt(true); i < n; i++) {\n            var animationName = this.readString();\n            var animation = this.readAnimation(animationName);\n            animations[animationName] = animation;\n        }\n    },\n    readSkin(skinName, nonessential) {\n        var slotCount = this.readInt(true);\n        if (slotCount == 0) return null;\n        var skin = {};\n        for (var i = 0; i < slotCount; i++) {\n            var slotIndex = this.readInt(true);\n            var slot = {};\n            for (var j = 0, n = this.readInt(true); j < n; j++) {\n                var name = this.readString();\n                var attachment = this.readAttachment(name, nonessential);\n                slot[name] = attachment;\n            }\n            skin[this.json.slots[slotIndex].name] = slot;\n        }\n        return skin;\n    },\n    readAttachment(attachmentName, nonessential) {\n        var name = this.readString();\n        if (name == null) name = attachmentName;\n        switch (AttachmentType[this.readByte()]) {\n            case 'region':\n                var path = this.readString();\n                if (path == null) path = name;\n                var region = {};\n                region.type = 'region';\n                region.name = name;\n                region.path = path;\n                region.rotation = this.readFloat();\n                region.x = this.readFloat() * this.scale;\n                region.y = this.readFloat() * this.scale;\n                region.scaleX = this.readFloat();\n                region.scaleY = this.readFloat();\n                region.width = this.readFloat() * this.scale;\n                region.height = this.readFloat() * this.scale;\n                region.color = this.readColor();\n                return region;\n            case 'boundingbox':\n                var box = {};\n                box.type = 'boundingbox';\n                box.name = name;\n                var vertexCount = this.readInt(true);\n                box.vertexCount = vertexCount;\n                box.vertices = this.readVertices(vertexCount);\n                if (this.nonessential) {\n                    box.color = this.readColor();\n                }\n                return box;\n            case 'mesh':\n                var path = this.readString();\n                if (path == null) path = name;\n                var mesh = {};\n                mesh.type = 'mesh';\n                mesh.name = name;\n                mesh.path = path;\n                mesh.color = this.readColor();\n                var vertexCount = this.readInt(true);\n                mesh.uvs = this.readFloatArray(vertexCount << 1, 1);\n                mesh.triangles = this.readShortArray();\n                mesh.vertices = this.readVertices(vertexCount);\n                mesh.hull = this.readInt(true) << 1;\n                if (nonessential) {\n                    mesh.edges = this.readShortArray();\n                    mesh.width = this.readFloat() * this.scale;\n                    mesh.height = this.readFloat() * this.scale;\n                }\n                return mesh;\n            case 'linkedmesh':\n                var path = this.readString();\n                if (path == null) path = name;\n                var linkedmesh = {};\n                linkedmesh.type = 'linkedmesh';\n                linkedmesh.name = name;\n                linkedmesh.path = path;\n                linkedmesh.color = this.readColor();\n                linkedmesh.skin = this.readString();\n                linkedmesh.parent = this.readString();\n                linkedmesh.deform = this.readBoolean();\n                if (nonessential) {\n                    linkedmesh.width = this.readFloat() * this.scale;\n                    linkedmesh.height = this.readFloat() * this.scale;\n                }\n                return linkedmesh;\n            case 'path':\n                var path = {};\n                path.type = 'path';\n                path.name = name;\n                path.closed = this.readBoolean();\n                path.constantSpeed = this.readBoolean();\n                var vertexCount = this.readInt(true);\n                path.vertexCount = vertexCount;\n                path.vertices = this.readVertices(vertexCount);\n                var lengths = new Array(vertexCount / 3);\n                for (var i = 0; i < lengths.length; i++) {\n                    lengths[i] = this.readFloat() * this.scale;\n                }\n                path.lengths = lengths;\n                if (nonessential) {\n                    path.color = this.readColor();\n                }\n                return path;\n            case 'point':\n                var point = {};\n                point.type = 'point';\n                point.name = name;\n                point.rotation = this.readFloat();\n                point.x = this.readFloat() * this.scale;\n                point.y = this.readFloat() * this.scale;\n                if (nonessential) {\n                    path.color = this.readColor();\n                }\n                return point;\n            case 'clipping':\n                var clipping = {};\n                clipping.type = 'clipping';\n                clipping.name = name;\n                clipping.end = this.readInt(true);\n                var vertexCount = this.readInt(true);\n                clipping.vertexCount = vertexCount;\n                clipping.vertices = this.readVertices(vertexCount);\n                if (nonessential) {\n                    clipping.color = this.readColor();\n                }\n                return clipping;\n        }\n        return null;\n    },\n    readCurve(frameIndex, timeline) {\n        switch (this.readByte()) {\n            case 0:\n                timeline[frameIndex].curve = 'linear';\n                break;\n            case 1:\n                timeline[frameIndex].curve = 'stepped';\n                break;\n            case 2:\n                var cx1 = this.readFloat();\n                var cy1 = this.readFloat();\n                var cx2 = this.readFloat();\n                var cy2 = this.readFloat();\n                timeline[frameIndex].curve = [cx1, cy1, cx2, cy2];\n        }\n    },\n    readAnimation(name) {\n        var animation = {};\n        var scale = this.scale;\n        var duration = 0;\n        var slots = {};\n        for (var i = 0, n = this.readInt(true); i < n; i++) {\n            var slotIndex = this.readInt(true);\n            var slotMap = {};\n            var timeCount = this.readInt(true);\n            for (var ii = 0; ii < timeCount; ii++) {\n                var timelineType = this.readByte();\n                var frameCount = this.readInt(true);\n                switch (timelineType) {\n                    case 0:\n                        var timeline = new Array(frameCount);\n                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n                            var time = this.readFloat();\n                            var attachmentName = this.readString();\n                            timeline[frameIndex] = {};\n                            timeline[frameIndex].time = time;\n                            timeline[frameIndex].name = attachmentName;\n                        }\n                        slotMap.attachment = timeline;\n                        duration = Math.max(duration, timeline[frameCount - 1].time);\n                        break;\n                    case 1:\n                        var timeline = new Array(frameCount);\n                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n                            var time = this.readFloat();\n                            var color = this.readColor();\n                            timeline[frameIndex] = {};\n                            timeline[frameIndex].time = time;\n                            timeline[frameIndex].color = color;\n                            if (frameIndex < frameCount - 1) {\n                                var str = this.readCurve(frameIndex, timeline);\n                            }\n                        }\n                        slotMap.color = timeline;\n                        duration = Math.max(duration, timeline[frameCount - 1].time);\n                        break;\n                    case 2:\n                        var timeline = new Array(frameCount);\n                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n                            var time = this.readFloat();\n                            var light = this.readColor();\n                            var dark = this.readColor();\n                            timeline[frameIndex] = {};\n                            timeline[frameIndex].time = time;\n                            timeline[frameIndex].light = light;\n                            timeline[frameIndex].dark = dark;\n                            if (frameIndex < frameCount - 1) {\n                                var str = this.readCurve(frameIndex, timeline);\n                            }\n                        }\n                        slotMap.twoColor = timeline;\n                        duration = Math.max(duration, timeline[frameCount - 1].time);\n                        break;\n                }\n            }\n            slots[this.json.slots[slotIndex].name] = slotMap;\n        }\n        animation.slots = slots;\n        var bones = {};\n        for (var i = 0, n = this.readInt(true); i < n; i++) {\n            var boneIndex = this.readInt(true);\n            var boneMap = {};\n            for (var ii = 0, nn = this.readInt(true); ii < nn; ii++) {\n                var timelineType = this.readByte();\n                var frameCount = this.readInt(true);\n                switch (timelineType) {\n                    case 0:\n                        var timeline = new Array(frameCount);\n                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n                            var time = this.readFloat();\n                            var angle = this.readFloat();\n                            timeline[frameIndex] = {};\n                            timeline[frameIndex].time = time;\n                            timeline[frameIndex].angle = angle;\n                            if (frameIndex < frameCount - 1) {\n                                this.readCurve(frameIndex, timeline);\n                            }\n                        }\n                        boneMap.rotate = timeline;\n                        duration = Math.max(duration, timeline[frameCount - 1].time);\n                        break;\n                    case 1:\n                    case 2:\n                    case 3:\n                        var timeline = new Array(frameCount);\n                        var timelineScale = 1;\n                        if (timelineType == 1) {\n                            timelineScale = scale;\n                        }\n                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n                            var tltime = this.readFloat();\n                            var tlx = this.readFloat();\n                            var tly = this.readFloat();\n                            timeline[frameIndex] = {};\n                            timeline[frameIndex].time = tltime;\n                            timeline[frameIndex].x = tlx * timelineScale;\n                            timeline[frameIndex].y = tly * timelineScale;\n                            if (frameIndex < frameCount - 1) {\n                                this.readCurve(frameIndex, timeline);\n                            }\n                        }\n                        if (timelineType == 1) {\n                            boneMap.translate = timeline;\n                        } else if (timelineType == 2) {\n                            boneMap.scale = timeline;\n                        } else {\n                            boneMap.shear = timeline;\n                        }\n                        duration = Math.max(duration, timeline[frameCount - 1].time);\n                        break;\n                }\n            }\n            bones[this.json.bones[boneIndex].name] = boneMap;\n        }\n        animation.bones = bones;\n        var ik = {};\n        for (var i = 0, n = this.readInt(true); i < n; i++) {\n            var ikIndex = this.readInt(true);\n            var frameCount = this.readInt(true);\n            var timeline = new Array(frameCount);\n            for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n                var time = this.readFloat();\n                var mix = this.readFloat();\n                var bendPositive = this.readByte() != 255;\n                timeline[frameIndex] = {};\n                timeline[frameIndex].time = time;\n                timeline[frameIndex].mix = mix;\n                timeline[frameIndex].bendPositive = bendPositive;\n                if (frameIndex < frameCount - 1) {\n                    this.readCurve(frameIndex, timeline);\n                }\n            }\n            ik[this.json.ik[ikIndex].name] = timeline;\n        }\n        animation.ik = ik;\n        var transform = {};\n        for (var i = 0, n = this.readInt(true); i < n; i++) {\n            var transformIndex = this.readInt(true);\n            var frameCount = this.readInt(true);\n            var timeline = new Array(frameCount);\n            for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n                timeline[frameIndex] = {};\n                timeline[frameIndex].time = this.readFloat();\n                timeline[frameIndex].rotateMix = this.readFloat();\n                timeline[frameIndex].translateMix = this.readFloat();\n                timeline[frameIndex].scaleMix = this.readFloat();\n                timeline[frameIndex].shearMix = this.readFloat();\n                if (frameIndex < frameCount - 1) {\n                    this.readCurve(frameIndex, timeline);\n                }\n            }\n            transform[this.json.transform[transformIndex].name] = timeline;\n        }\n        animation.transform = transform;\n        var paths = {};\n        for (var i = 0, n = this.readInt(true); i < n; i++) {\n            var pathIndex = this.readInt(true);\n            var pathMap = {};\n            for (var ii = 0, nn = this.readInt(true); ii < nn; ii++) {\n                var timelineType = this.readByte();\n                var frameCount = this.readInt(true);\n                switch (timelineType) {\n                    case 0:\n                    case 1:\n                        var timeline = new Array(frameCount);\n                        var timelineScale = 1;\n                        if (timelineType == 1) {\n                            timelineScale = this.scale;\n                        } else {\n                            timelineScale = this.scale;\n                        }\n                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n                            var time = this.readFloat();\n                            var f = this.readFloat();\n                            timeline[frameIndex] = {};\n                            timeline[frameIndex].time = time;\n                            if (timelineType == 0) {\n                                timeline[frameIndex].position = f;\n                            } else {\n                                timeline[frameIndex].spacing = f;\n                            }\n                            if (frameIndex < frameCount - 1) this.readCurve(frameIndex, timeline);\n                        }\n                        if (timelineType == 0) {\n                            pathMap.position = timeline;\n                        } else {\n                            pathMap.spacing = timeline;\n                        }\n                        break;\n                    case 2:\n                        var timeline = new Array(frameCount);\n                        for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n                            var time = this.readFloat();\n                            var rotateMix = this.readFloat();\n                            var translateMix = this.readFloat();\n                            timeline[frameIndex] = {};\n                            timeline[frameIndex].time = time;\n                            timeline[frameIndex].rotateMix = rotateMix;\n                            timeline[frameIndex].translateMix = translateMix;\n                            if (frameIndex < frameCount - 1) this.readCurve(frameIndex, timeline);\n                        }\n                        pathMap.mix = timeline;\n                        break;\n                }\n            }\n            paths[this.json.path[pathIndex].name] = pathMap;\n        }\n        animation.paths = paths;\n        var deform = {};\n        for (var i = 0, n = this.readInt(true); i < n; i++) {\n            var skinIndex = this.readInt(true);\n            var skinName = this.json.skinsName[skinIndex];\n            var skin = {};\n            for (var ii = 0, nn = this.readInt(true); ii < nn; ii++) {\n                var slotIndex = this.readInt(true);\n                var slotAtt = this.json.slots[slotIndex];\n                var slot = {};\n                for (var iii = 0, nnn = this.readInt(true); iii < nnn; iii++) {\n                    var meshName = this.readString();\n                    var frameCount = this.readInt(true);\n                    var timeline = new Array(frameCount);\n                    for (var frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n                        var time = this.readFloat();\n                        var end = this.readInt(true);\n                        timeline[frameIndex] = {};\n                        timeline[frameIndex].time = time;\n                        if (end != 0) {\n                            var vertices = new Array(end);\n                            var start = this.readInt(true);\n                            if (this.scale == 1) {\n                                for (var v = 0; v < end; v++) {\n                                    vertices[v] = this.readFloat();\n                                }\n                            } else {\n                                for (var v = 0; v < end; v++) {\n                                    vertices[v] = this.readFloat() * this.scale;\n                                }\n                            }\n                            timeline[frameIndex].offset = start;\n                            timeline[frameIndex].vertices = vertices;\n                        }\n                        if (frameIndex < frameCount - 1) this.readCurve(frameIndex, timeline);\n                    }\n                    slot[meshName] = timeline;\n                }\n                skin[slotAtt.name] = slot;\n            }\n            deform[skinName] = skin;\n        }\n        animation.deform = deform;\n        var drawOrderCount = this.readInt(true);\n        if (drawOrderCount > 0) {\n            var drawOrders = new Array(drawOrderCount);\n            for (var i = 0; i < drawOrderCount; i++) {\n                var drawOrderMap = {};\n                var time = this.readFloat();\n                var offsetCount = this.readInt(true);\n                var offsets = new Array(offsetCount);\n                for (var ii = 0; ii < offsetCount; ii++) {\n                    var offsetMap = {};\n                    var slotIndex = this.readInt(true);\n                    offsetMap.slot = this.json.slots[slotIndex].name;\n                    var dooffset = this.readInt(true);\n                    offsetMap.offset = dooffset;\n                    offsets[ii] = offsetMap;\n                }\n                drawOrderMap.offsets = offsets;\n                drawOrderMap.time = time;\n                drawOrders[i] = drawOrderMap;\n            }\n            duration = Math.max(duration, drawOrders[drawOrderCount - 1].time);\n            animation.drawOrder = drawOrders;\n        }\n        var eventCount = this.readInt(true);\n        if (eventCount > 0) {\n            var events = new Array(eventCount);\n            for (var i = 0; i < eventCount; i++) {\n                var time = this.readFloat();\n                var name = this.json.eventsName[this.readInt(true)];\n                var eventData = this.json.events[name];\n                var e = {};\n                e.name = name;\n                e.int = this.readInt(false);\n                e.float = this.readFloat();\n                e.string = this.readBoolean() ? this.readString() : eventData.string;\n                e.time = time;\n                events[i] = e;\n            }\n            duration = Math.max(duration, events[eventCount - 1].time);\n            animation.events = events;\n        }\n        return animation;\n    },\n};\nvar BlendMode = ['normal', 'additive', 'multiply', 'screen'];\nvar AttachmentType = ['region', 'boundingbox', 'mesh', 'linkedmesh', 'path', 'point', 'clipping'];\nvar TransformMode = ['normal', 'onlyTranslation', 'noRotationOrReflection', 'noScale', 'noScaleOrReflection'];\nvar PositionMode = ['fixed', 'percent'];\nvar SpacingMode = ['length', 'fixed', 'percent'];\nvar RotateMode = ['tangent', 'chain', 'chainScale'];\n\n// export {SkeletonBinary};\n\nexports.SkeletonBinary = SkeletonBinary;\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/SkeletonBinary.js"],"sourceRoot":""}